{
  "openapi": "3.0.0",
  "paths": {
    "/api?module=contract&action=getabi": {
      "get": {
        "operationId": "ApiController_getContractAbi",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The contract address that has a verified source code",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract ABI",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractAbiResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Contract API"
        ]
      }
    },
    "/api?module=contract&action=getcontractcreation": {
      "get": {
        "operationId": "ApiController_getContractCreation",
        "parameters": [
          {
            "name": "contractaddresses",
            "required": true,
            "in": "query",
            "explode": false,
            "description": "List of contract addresses, up to 5 at a time",
            "example": [
              "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
              "0x0E03197d697B592E5AE49EC14E952cddc9b28e14"
            ],
            "schema": {
              "type": "array",
              "items": {

              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Contract creation info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContractCreationResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Contract API"
        ]
      }
    },
    "/api?module=transaction&action=getstatus": {
      "get": {
        "operationId": "ApiController_getTransactionStatus",
        "parameters": [
          {
            "name": "txhash",
            "required": true,
            "in": "query",
            "description": "The transaction hash to check the execution status",
            "example": "0x04a4757cd59681b037c1e7bd2402cc45a23c66ed7497614879376719d34e020a",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status code of a contract execution",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionStatusResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction API"
        ]
      }
    },
    "/api?module=transaction&action=gettxreceiptstatus": {
      "get": {
        "operationId": "ApiController_getTransactionReceiptStatus",
        "parameters": [
          {
            "name": "txhash",
            "required": true,
            "in": "query",
            "description": "The transaction hash to check the execution status",
            "example": "0x04a4757cd59681b037c1e7bd2402cc45a23c66ed7497614879376719d34e020a",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Status code of a transaction execution",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionReceiptStatusResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Transaction API"
        ]
      }
    },
    "/api?module=account&action=txlist": {
      "get": {
        "operationId": "ApiController_getAccountTransactions",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number. Only first 100000 items can be requested so make sure page * offset \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of items returned per page",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 10,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "The sorting preference, use asc to sort by ascending and desc to sort by descending",
            "example": "desc",
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "endblock",
            "required": false,
            "in": "query",
            "description": "The block number to stop searching for transactions",
            "example": 99999999,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startblock",
            "required": false,
            "in": "query",
            "description": "The block number to start searching for transactions",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address to filter transactions by",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account transactions list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTransactionsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=txlistinternal": {
      "get": {
        "operationId": "ApiController_getAccountInternalTransactions",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number. Only first 100000 items can be requested so make sure page * offset \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of items returned per page",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 10,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "The sorting preference, use asc to sort by ascending and desc to sort by descending",
            "example": "desc",
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "endblock",
            "required": false,
            "in": "query",
            "description": "The block number to stop searching for internal transactions",
            "example": 99999999,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startblock",
            "required": false,
            "in": "query",
            "description": "The block number to start searching for internal transactions",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "txhash",
            "required": false,
            "in": "query",
            "description": "The transaction hash to filter internal transaction by",
            "example": "0x04a4757cd59681b037c1e7bd2402cc45a23c66ed7497614879376719d34e020a",
            "schema": {

            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "The address to filter internal transactions by",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Internal transactions list",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountInternalTransactionsResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=balance": {
      "get": {
        "operationId": "ApiController_getAccountEtherBalance",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address to get Ether balance for",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account Ether balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountEtherBalanceResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=balancemulti": {
      "get": {
        "operationId": "ApiController_getAccountsEtherBalances",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "query",
            "explode": false,
            "description": "List of addresses to get Ether balance for",
            "example": [
              "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
              "0x0E03197d697B592E5AE49EC14E952cddc9b28e14"
            ],
            "schema": {
              "type": "array",
              "items": {

              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Accounts Ether balances",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountsEtherBalancesResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=tokenbalance": {
      "get": {
        "operationId": "ApiController_getAccountTokenBalance",
        "parameters": [
          {
            "name": "contractaddress",
            "required": true,
            "in": "query",
            "description": "The Token contract address to get balance for",
            "example": "0x0faF6df7054946141266420b43783387A78d82A9",
            "schema": {

            }
          },
          {
            "name": "address",
            "required": true,
            "in": "query",
            "description": "The address to get Token balance for",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Account Token balance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTokenBalanceResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=tokentx": {
      "get": {
        "operationId": "ApiController_getAccountTokenTransfers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number. Only first 100000 items can be requested so make sure page * offset \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of items returned per page",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 10,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "The sorting preference, use asc to sort by ascending and desc to sort by descending",
            "example": "desc",
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "endblock",
            "required": false,
            "in": "query",
            "description": "The block number to stop searching for transfers",
            "example": 99999999,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startblock",
            "required": false,
            "in": "query",
            "description": "The block number to start searching for transfers",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contractaddress",
            "required": false,
            "in": "query",
            "description": "The Token contract address to get transfers for",
            "example": "0x0faF6df7054946141266420b43783387A78d82A9",
            "schema": {

            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "The address to get transfers for",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "Token transfers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountTokenTransfersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=account&action=tokennfttx": {
      "get": {
        "operationId": "ApiController_getAccountNFTTransfers",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "The page number. Only first 100000 items can be requested so make sure page * offset \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "required": false,
            "in": "query",
            "description": "The number of items returned per page",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 10000,
              "default": 10,
              "type": "integer"
            }
          },
          {
            "name": "sort",
            "required": false,
            "in": "query",
            "description": "The sorting preference, use asc to sort by ascending and desc to sort by descending",
            "example": "desc",
            "schema": {
              "default": "desc",
              "enum": [
                "desc",
                "asc"
              ],
              "type": "string"
            }
          },
          {
            "name": "endblock",
            "required": false,
            "in": "query",
            "description": "The block number to stop searching for transfers",
            "example": 99999999,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "startblock",
            "required": false,
            "in": "query",
            "description": "The block number to start searching for transfers",
            "example": 0,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "contractaddress",
            "required": false,
            "in": "query",
            "description": "The Token contract address to get transfers for",
            "example": "0x0faF6df7054946141266420b43783387A78d82A9",
            "schema": {

            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "The address to get transfers for",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
            "schema": {

            }
          }
        ],
        "responses": {
          "200": {
            "description": "NFT transfers",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AccountNFTTransfersResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Account API"
        ]
      }
    },
    "/api?module=block&action=getblocknobytime": {
      "get": {
        "operationId": "ApiController_getBlockNumberByTimestamp",
        "parameters": [
          {
            "name": "closest",
            "required": false,
            "in": "query",
            "description": "The closest available block to the provided timestamp, either before or after",
            "example": "before",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "timestamp",
            "required": true,
            "in": "query",
            "description": "The integer representing the Unix timestamp in seconds",
            "example": 1635934550,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the block number that was mined at a certain timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockNumberResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Block API"
        ]
      }
    },
    "/api?module=block&action=getblockcountdown": {
      "get": {
        "operationId": "ApiController_getBlockCountdown",
        "parameters": [
          {
            "name": "blockno",
            "required": true,
            "in": "query",
            "description": "The integer block number to estimate time remaining to be mined",
            "example": 12697906,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns the estimated time remaining, in seconds, until a certain block is mined",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCountdownResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Block API"
        ]
      }
    },
    "/api?module=block&action=getblockreward": {
      "get": {
        "operationId": "ApiController_getBlockRewards",
        "parameters": [
          {
            "name": "blockno",
            "required": true,
            "in": "query",
            "description": "The integer block number to check block rewards",
            "example": 12697906,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Returns block rewards",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockRewardResponseDto"
                }
              }
            }
          }
        },
        "tags": [
          "Block API"
        ]
      }
    },
    "/address/{address}": {
      "get": {
        "operationId": "AddressController_getAddress",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^(0x)?[0-9a-fA-F]{40}$"
            },
            "example": "0xd754ff5e8a6f257e162f72578a4bb0493c0681d8",
            "description": "Valid hex address"
          }
        ],
        "responses": {
          "200": {
            "description": "Address was returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AccountDto"
                    },
                    {
                      "$ref": "#/components/schemas/ContractDto"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Specified address is invalid"
          }
        },
        "tags": [
          "address"
        ]
      }
    },
    "/address/{address}/logs": {
      "get": {
        "operationId": "AddressController_getAddressLogs",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^(0x)?[0-9a-fA-F]{40}$"
            },
            "example": "0xd754ff5e8a6f257e162f72578a4bb0493c0681d8",
            "description": "Valid hex address"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned address logs",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LogDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Specified address is invalid or paging query params are not valid or out of range"
          }
        },
        "tags": [
          "address"
        ]
      }
    },
    "/address/{address}/transfers": {
      "get": {
        "operationId": "AddressController_getAddressTransfers",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^(0x)?[0-9a-fA-F]{40}$"
            },
            "example": "0xd754ff5e8a6f257e162f72578a4bb0493c0681d8",
            "description": "Valid hex address"
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp greater or equal to specified",
            "example": "2020-04-25T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp less than specified",
            "example": "2025-04-26T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned address transfers",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransferDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Specified address is invalid or paging query params are not valid or out of range"
          }
        },
        "tags": [
          "address"
        ]
      }
    },
    "/blocks": {
      "get": {
        "operationId": "BlockController_getBlocks",
        "parameters": [
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp greater or equal to specified",
            "example": "2020-04-25T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp less than specified",
            "example": "2025-04-26T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned blocks list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BlockDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Query params are not valid or out of range"
          }
        },
        "tags": [
          "blocks"
        ]
      }
    },
    "/blocks/{blockNumber}": {
      "get": {
        "operationId": "BlockController_getBlock",
        "parameters": [
          {
            "name": "blockNumber",
            "required": true,
            "in": "path",
            "example": "1",
            "description": "Block number",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Block was returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetailDto"
                }
              }
            }
          },
          "400": {
            "description": "Block number is invalid"
          },
          "404": {
            "description": "Block with the specified number does not exist"
          }
        },
        "tags": [
          "blocks"
        ]
      }
    },
    "/transactions": {
      "get": {
        "operationId": "TransactionController_getTransactions",
        "parameters": [
          {
            "name": "l1BatchNumber",
            "required": false,
            "in": "query",
            "description": "L1 batch number to filter transactions by",
            "example": null,
            "schema": {
              "minimum": 0,
              "default": null,
              "type": "number"
            }
          },
          {
            "name": "blockNumber",
            "required": false,
            "in": "query",
            "description": "Block number to filter transactions by",
            "example": null,
            "schema": {
              "minimum": 0,
              "default": null,
              "type": "number"
            }
          },
          {
            "name": "address",
            "required": false,
            "in": "query",
            "description": "Address to filter transactions by",
            "example": null,
            "schema": {
              "default": null,
              "type": "string"
            }
          },
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp greater or equal to specified",
            "example": "2020-04-25T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp less than specified",
            "example": "2025-04-26T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned transactions list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransactionDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Query params are not valid or out of range"
          }
        },
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transactionHash}": {
      "get": {
        "operationId": "TransactionController_getTransaction",
        "parameters": [
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^0x[0-9A-Fa-f]{64}$"
            },
            "example": "0xd99bd0a1ed5de1c258637e40f3e4e1f461375f5ca4712339031a8dade8079e88",
            "description": "Valid transaction hash"
          }
        ],
        "responses": {
          "200": {
            "description": "Transaction was returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDto"
                }
              }
            }
          },
          "400": {
            "description": "Transaction hash is invalid"
          },
          "404": {
            "description": "Transaction with the specified hash does not exist"
          }
        },
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transactionHash}/transfers": {
      "get": {
        "operationId": "TransactionController_getTransactionTransfers",
        "parameters": [
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^0x[0-9A-Fa-f]{64}$"
            },
            "example": "0xd99bd0a1ed5de1c258637e40f3e4e1f461375f5ca4712339031a8dade8079e88",
            "description": "Valid transaction hash"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned transaction transfers list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransferDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Transaction hash is invalid or paging query params are not valid or out of range"
          },
          "404": {
            "description": "Transaction with the specified hash does not exist"
          }
        },
        "tags": [
          "transactions"
        ]
      }
    },
    "/transactions/{transactionHash}/logs": {
      "get": {
        "operationId": "TransactionController_getTransactionLogs",
        "parameters": [
          {
            "name": "transactionHash",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^0x[0-9A-Fa-f]{64}$"
            },
            "example": "0xd99bd0a1ed5de1c258637e40f3e4e1f461375f5ca4712339031a8dade8079e88",
            "description": "Valid transaction hash"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned transaction logs list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/LogDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Transaction hash is invalid or paging query params are not valid or out of range"
          },
          "404": {
            "description": "Transaction with the specified hash does not exist"
          }
        },
        "tags": [
          "transactions"
        ]
      }
    },
    "/tokens": {
      "get": {
        "operationId": "TokenController_getTokens",
        "parameters": [
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned token list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TokenDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Paging query params are not valid or out of range"
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/tokens/{address}": {
      "get": {
        "operationId": "TokenController_getToken",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^(0x)?[0-9a-fA-F]{40}$"
            },
            "example": "0xd754ff5e8a6f257e162f72578a4bb0493c0681d8",
            "description": "Valid hex address"
          }
        ],
        "responses": {
          "200": {
            "description": "Token was returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TokenDto"
                }
              }
            }
          },
          "400": {
            "description": "Token address is invalid"
          },
          "404": {
            "description": "Token with the specified address does not exist"
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/tokens/{address}/transfers": {
      "get": {
        "operationId": "TokenController_getTokenTransfers",
        "parameters": [
          {
            "name": "address",
            "required": true,
            "in": "path",
            "schema": {
              "pattern": "^(0x)?[0-9a-fA-F]{40}$"
            },
            "example": "0xd754ff5e8a6f257e162f72578a4bb0493c0681d8",
            "description": "Valid hex address"
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return. Only first 100000 items can be requested so make sure page * limit \u003C= 100000.",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned token transfers list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/TransferDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Token address is invalid or paging query params are not valid or out of range"
          },
          "404": {
            "description": "Token with the specified address does not exist"
          }
        },
        "tags": [
          "tokens"
        ]
      }
    },
    "/batches": {
      "get": {
        "operationId": "BatchController_getBatches",
        "parameters": [
          {
            "name": "fromDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp greater or equal to specified",
            "example": "2020-04-25T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "toDate",
            "required": false,
            "in": "query",
            "description": "A date in JSON format. Filters items with timestamp less than specified",
            "example": "2025-04-26T00:43:26.000Z",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "One-based page index to return",
            "example": 1,
            "schema": {
              "minimum": 1,
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "A number of items to return on a page. The maximum is 100 and is limited by the server.",
            "example": 10,
            "schema": {
              "minimum": 1,
              "maximum": 100,
              "default": 10,
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully returned batch list",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/ListPageDto"
                    },
                    {
                      "properties": {
                        "items": {
                          "type": "array",
                          "items": {
                            "$ref": "#/components/schemas/BatchDto"
                          }
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Query params are not valid or out of range"
          }
        },
        "tags": [
          "batches"
        ]
      }
    },
    "/batches/{batchNumber}": {
      "get": {
        "operationId": "BatchController_getBatch",
        "parameters": [
          {
            "name": "batchNumber",
            "required": true,
            "in": "path",
            "example": "1",
            "description": "Batch number",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Batch was returned successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchDetailsDto"
                }
              }
            }
          },
          "400": {
            "description": "Batch number is invalid"
          },
          "404": {
            "description": "Batch with the specified number does not exist"
          }
        },
        "tags": [
          "batches"
        ]
      }
    },
    "/stats": {
      "get": {
        "operationId": "StatsController_stats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Blockchain stats",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StatsDto"
                }
              }
            }
          }
        },
        "tags": [
          "stats"
        ]
      }
    }
  },
  "info": {
    "title": "Block explorer API",
    "description": "ZkSync Block Explorer API",
    "version": "1.0",
    "contact": {

    }
  },
  "tags": [],
  "servers": [],
  "components": {
    "schemas": {
      "ContractAbiResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "object",
            "description": "The contract ABI",
            "example": "[{\"inputs\":[{\"name\":\"greeting\",\"type\":\"string\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setup\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"greeting\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}]"
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "ContractCreationInfoDto": {
        "type": "object",
        "properties": {
          "contractAddress": {
            "type": "string",
            "description": "Contract address",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594"
          },
          "contractCreator": {
            "type": "string",
            "description": "Contract creator address",
            "example": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28"
          },
          "txHash": {
            "type": "string",
            "description": "Transaction hash contract was created",
            "example": "0x37eeda3dd1b10afadfaba8e1896d9c513f527062cf04bb83f653c070c4725b7f"
          }
        },
        "required": [
          "contractAddress",
          "contractCreator",
          "txHash"
        ]
      },
      "ContractCreationResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "object",
            "description": "The contract creation info",
            "example": [
              {
                "contractAddress": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
                "contractCreator": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
                "txHash": "0x37eeda3dd1b10afadfaba8e1896d9c513f527062cf04bb83f653c070c4725b7f"
              },
              {
                "contractAddress": "0x0E03197d697B592E5AE49EC14E952cddc9b28e14",
                "contractCreator": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
                "txHash": "0xcaecae4ceb6ad494c9f7c7c6897e6a61f12984053521d8c4ba2bc8801037b4ff"
              }
            ]
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "TransactionStatusDto": {
        "type": "object",
        "properties": {
          "isError": {
            "type": "string",
            "description": "Returns 0 for successful transactions and 1 for failed transactions",
            "example": "0"
          },
          "errDescription": {
            "type": "string",
            "description": "Error description",
            "example": "Reverted"
          }
        },
        "required": [
          "isError",
          "errDescription"
        ]
      },
      "TransactionStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "object",
            "description": "Status code of a contract execution",
            "example": {
              "isError": "0",
              "errDescription": "Reverted"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "TransactionReceiptStatusResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "object",
            "description": "Status code of a transaction execution",
            "example": {
              "status": "0"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountTransactionDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of this transaction",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0"
          },
          "to": {
            "type": "string",
            "description": "The to address of this transaction",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "from": {
            "type": "string",
            "description": "The from address of this transaction",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "transactionIndex": {
            "type": "string",
            "description": "The index of the transaction in the block",
            "example": "3233097"
          },
          "input": {
            "type": "string",
            "description": "The data included in this transaction",
            "example": "0x000000000000000000000000000000000000000000000000016345785d8a0000"
          },
          "value": {
            "type": "string",
            "description": "The value of this transaction",
            "example": "10000000000000000"
          },
          "gas": {
            "type": "string",
            "description": "Gas limit",
            "example": "10000000000000000"
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price",
            "example": "10000000000000000"
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used by this transaction",
            "example": "10000000000000000"
          },
          "cumulativeGasUsed": {
            "type": "string",
            "description": "Cumulative gas used",
            "example": "10000000000000000"
          },
          "fee": {
            "type": "string",
            "description": "The fee paid to execute this transaction",
            "example": "10000000000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce for this transaction",
            "example": "42"
          },
          "confirmations": {
            "type": "string",
            "description": "Number of confirmations",
            "example": "100"
          },
          "blockNumber": {
            "type": "string",
            "description": "The number (height) of the block this transaction was mined in",
            "example": "3233097"
          },
          "blockHash": {
            "type": "string",
            "description": "The hash of the block this transaction was mined in",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timestamp when the transaction was received",
            "example": "1679988122"
          },
          "commitTxHash": {
            "type": "string",
            "description": "The hash of the transaction that committed the block, null if not committed yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "proveTxHash": {
            "type": "string",
            "description": "The hash of the transaction that proved the block, null if not proved yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "executeTxHash": {
            "type": "string",
            "description": "The hash of the transaction that executed the block, null if not executed yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "isL1Originated": {
            "type": "string",
            "description": "Property that shows whether the transaction was originated from L1 network",
            "example": "1",
            "examples": [
              "1",
              "0"
            ]
          },
          "l1BatchNumber": {
            "type": "string",
            "description": "L1 batch number",
            "example": "3233097"
          },
          "contractAddress": {
            "type": "string",
            "description": "Contract address",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
            "nullable": true
          },
          "isError": {
            "type": "string",
            "description": "Returns 0 for successful transactions and 1 for failed transactions",
            "example": "0"
          },
          "txreceipt_status": {
            "type": "string",
            "description": "Status code of this transaction execution",
            "example": "1"
          },
          "methodId": {
            "type": "string",
            "description": "Method Id",
            "example": "0xa9059cbb"
          },
          "functionName": {
            "type": "string",
            "description": "Function name",
            "example": "transfer(address to, uint256 tokens)"
          }
        },
        "required": [
          "hash",
          "to",
          "from",
          "transactionIndex",
          "input",
          "value",
          "gas",
          "gasPrice",
          "gasUsed",
          "cumulativeGasUsed",
          "fee",
          "nonce",
          "confirmations",
          "blockNumber",
          "blockHash",
          "timeStamp",
          "commitTxHash",
          "proveTxHash",
          "executeTxHash",
          "isL1Originated",
          "l1BatchNumber",
          "contractAddress",
          "isError",
          "txreceipt_status",
          "methodId",
          "functionName"
        ]
      },
      "AccountTransactionsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "The account transactions list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTransactionDto"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountInternalTransactionDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of parent transaction",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0"
          },
          "to": {
            "type": "string",
            "description": "The to address of this internal transaction",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "from": {
            "type": "string",
            "description": "The from address of this internal transaction",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "input": {
            "type": "string",
            "description": "The data included in this internal transaction",
            "example": ""
          },
          "value": {
            "type": "string",
            "description": "The value of this internal transaction",
            "example": "10000000000000000"
          },
          "gas": {
            "type": "string",
            "description": "Gas limit",
            "example": "10000000000000000"
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used by parent transaction",
            "example": "10000000000000000"
          },
          "fee": {
            "type": "string",
            "description": "The fee paid to execute parent transaction",
            "example": "10000000000000000"
          },
          "blockNumber": {
            "type": "string",
            "description": "The number (height) of the block the parent transaction was mined in",
            "example": "3233097"
          },
          "l1BatchNumber": {
            "type": "string",
            "description": "L1 batch number",
            "example": "3233097"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timestamp when the parent transaction was received",
            "example": "1679988122"
          },
          "contractAddress": {
            "type": "string",
            "description": "Contract address",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
            "nullable": true
          },
          "type": {
            "type": "string",
            "description": "Internal transaction type",
            "example": "call"
          },
          "traceId": {
            "type": "string",
            "description": "Trace id of the internal transaction",
            "example": "0"
          },
          "isError": {
            "type": "string",
            "description": "Returns 0 for successful transactions and 1 for failed transactions",
            "example": "0"
          },
          "errCode": {
            "type": "string",
            "description": "Error code for failed transaction",
            "example": ""
          }
        },
        "required": [
          "hash",
          "to",
          "from",
          "input",
          "value",
          "gas",
          "gasUsed",
          "fee",
          "blockNumber",
          "l1BatchNumber",
          "timeStamp",
          "contractAddress",
          "type",
          "traceId",
          "isError",
          "errCode"
        ]
      },
      "AccountInternalTransactionsResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "Internal transactions list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountInternalTransactionDto"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountEtherBalanceResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "string",
            "description": "The account Ether balance",
            "example": "5200000000000000000"
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountsEtherBalancesResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "object",
            "description": "The accounts Ether balances",
            "example": [
              {
                "account": "0xFb7E0856e44Eff812A44A9f47733d7d55c39Aa28",
                "balance": "5200000000000000000"
              },
              {
                "account": "0x0E03197d697B592E5AE49EC14E952cddc9b28e14",
                "balance": "4200000000000000000"
              }
            ]
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountTokenBalanceResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "string",
            "description": "The account Token balance",
            "example": "5200000000000000000"
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountTokenTransferDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of parent transaction",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0"
          },
          "to": {
            "type": "string",
            "description": "The to address of this transfer",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "from": {
            "type": "string",
            "description": "The from address of this transfer",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "transactionIndex": {
            "type": "string",
            "description": "The index of the parent transaction in the block",
            "example": "3233097"
          },
          "input": {
            "type": "string",
            "description": "The data included in parent transaction",
            "example": "0x000000000000000000000000000000000000000000000000016345785d8a0000"
          },
          "value": {
            "type": "string",
            "description": "The value of this transfer",
            "example": "10000000000000000"
          },
          "gas": {
            "type": "string",
            "description": "Gas limit",
            "example": "10000000000000000"
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price",
            "example": "10000000000000000"
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used by parent transaction",
            "example": "10000000000000000"
          },
          "cumulativeGasUsed": {
            "type": "string",
            "description": "Cumulative gas used",
            "example": "10000000000000000"
          },
          "fee": {
            "type": "string",
            "description": "The fee paid to execute parent transaction",
            "example": "10000000000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce for parent transaction",
            "example": "42"
          },
          "confirmations": {
            "type": "string",
            "description": "Number of confirmations",
            "example": "100"
          },
          "blockNumber": {
            "type": "string",
            "description": "The number (height) of the block the parent transaction was mined in",
            "example": "3233097"
          },
          "blockHash": {
            "type": "string",
            "description": "The hash of the block the parent transaction was mined in",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c"
          },
          "l1BatchNumber": {
            "type": "string",
            "description": "L1 batch number",
            "example": "3233097"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timestamp when the parent transaction was received",
            "example": "1679988122"
          },
          "contractAddress": {
            "type": "string",
            "description": "Token contract address",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
            "nullable": true
          },
          "tokenName": {
            "type": "string",
            "description": "Token name",
            "example": "Token"
          },
          "tokenSymbol": {
            "type": "string",
            "description": "Token symbol",
            "example": "TKN"
          },
          "tokenDecimal": {
            "type": "string",
            "description": "Token decimals",
            "example": "18"
          }
        },
        "required": [
          "hash",
          "to",
          "from",
          "transactionIndex",
          "input",
          "value",
          "gas",
          "gasPrice",
          "gasUsed",
          "cumulativeGasUsed",
          "fee",
          "nonce",
          "confirmations",
          "blockNumber",
          "blockHash",
          "l1BatchNumber",
          "timeStamp",
          "contractAddress",
          "tokenName",
          "tokenSymbol",
          "tokenDecimal"
        ]
      },
      "AccountTokenTransfersResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "Token transfers list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountTokenTransferDto"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "AccountNFTTransferDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of parent transaction",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0"
          },
          "to": {
            "type": "string",
            "description": "The to address of this transfer",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "from": {
            "type": "string",
            "description": "The from address of this transfer",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "transactionIndex": {
            "type": "string",
            "description": "The index of the parent transaction in the block",
            "example": "3233097"
          },
          "input": {
            "type": "string",
            "description": "The data included in parent transaction",
            "example": "0x000000000000000000000000000000000000000000000000016345785d8a0000"
          },
          "value": {
            "type": "string",
            "description": "The value of this transfer",
            "example": "10000000000000000"
          },
          "gas": {
            "type": "string",
            "description": "Gas limit",
            "example": "10000000000000000"
          },
          "gasPrice": {
            "type": "string",
            "description": "Gas price",
            "example": "10000000000000000"
          },
          "gasUsed": {
            "type": "string",
            "description": "Gas used by parent transaction",
            "example": "10000000000000000"
          },
          "cumulativeGasUsed": {
            "type": "string",
            "description": "Cumulative gas used",
            "example": "10000000000000000"
          },
          "fee": {
            "type": "string",
            "description": "The fee paid to execute parent transaction",
            "example": "10000000000000000"
          },
          "nonce": {
            "type": "string",
            "description": "The nonce for parent transaction",
            "example": "42"
          },
          "confirmations": {
            "type": "string",
            "description": "Number of confirmations",
            "example": "100"
          },
          "blockNumber": {
            "type": "string",
            "description": "The number (height) of the block the parent transaction was mined in",
            "example": "3233097"
          },
          "blockHash": {
            "type": "string",
            "description": "The hash of the block the parent transaction was mined in",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c"
          },
          "l1BatchNumber": {
            "type": "string",
            "description": "L1 batch number",
            "example": "3233097"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timestamp when the parent transaction was received",
            "example": "1679988122"
          },
          "contractAddress": {
            "type": "string",
            "description": "Token contract address",
            "example": "0x8A63F953e19aA4Ce3ED90621EeF61E17A95c6594",
            "nullable": true
          },
          "tokenName": {
            "type": "string",
            "description": "Token name",
            "example": "Token"
          },
          "tokenSymbol": {
            "type": "string",
            "description": "Token symbol",
            "example": "TKN"
          },
          "tokenDecimal": {
            "type": "string",
            "description": "Token decimals",
            "example": "18"
          },
          "tokenID": {
            "type": "string",
            "description": "Token Id",
            "example": "123"
          }
        },
        "required": [
          "hash",
          "to",
          "from",
          "transactionIndex",
          "input",
          "value",
          "gas",
          "gasPrice",
          "gasUsed",
          "cumulativeGasUsed",
          "fee",
          "nonce",
          "confirmations",
          "blockNumber",
          "blockHash",
          "l1BatchNumber",
          "timeStamp",
          "contractAddress",
          "tokenName",
          "tokenSymbol",
          "tokenDecimal",
          "tokenID"
        ]
      },
      "AccountNFTTransfersResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "NFT transfers list",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountNFTTransferDto"
            }
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "BlockNumberResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "type": "string",
            "description": "The block number that was mined at a certain timestamp",
            "example": "5784003"
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "BlockCountdownDto": {
        "type": "object",
        "properties": {
          "CurrentBlock": {
            "type": "string",
            "description": "Current block number",
            "example": "5783999"
          },
          "CountdownBlock": {
            "type": "string",
            "description": "Countdown block number",
            "example": "5793995"
          },
          "RemainingBlock": {
            "type": "string",
            "description": "The number of blocks to be mined until a certain block is mined",
            "example": "9996"
          },
          "EstimateTimeInSec": {
            "type": "string",
            "description": "The estimated time remaining, in seconds, until a certain block is mined",
            "example": "9996"
          }
        },
        "required": [
          "CurrentBlock",
          "CountdownBlock",
          "RemainingBlock",
          "EstimateTimeInSec"
        ]
      },
      "BlockCountdownResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "The estimated time remaining, in seconds, until a certain block is mined",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockCountdownDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "BlockRewardDto": {
        "type": "object",
        "properties": {
          "blockNumber": {
            "type": "string",
            "description": "The number (height) of the block",
            "example": "5783999"
          },
          "timeStamp": {
            "type": "string",
            "description": "The timestamp of the block",
            "example": "1635934428"
          },
          "blockMiner": {
            "type": "string",
            "description": "An address that mined the block",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "blockReward": {
            "type": "string",
            "description": "Reward for the block",
            "example": "1000"
          },
          "uncles": {
            "type": "string",
            "description": "Uncle blocks",
            "example": [
              "1000",
              "1001"
            ]
          },
          "uncleInclusionReward": {
            "type": "string",
            "description": "Uncle inclusion reward",
            "example": "1000"
          }
        },
        "required": [
          "blockNumber",
          "timeStamp",
          "blockMiner",
          "blockReward",
          "uncles",
          "uncleInclusionReward"
        ]
      },
      "BlockRewardResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "Response status",
            "example": "1"
          },
          "message": {
            "type": "string",
            "description": "Response message",
            "example": "OK"
          },
          "result": {
            "description": "The block reward and 'Uncle' block rewards",
            "allOf": [
              {
                "$ref": "#/components/schemas/BlockRewardDto"
              }
            ]
          }
        },
        "required": [
          "status",
          "message",
          "result"
        ]
      },
      "TokenDto": {
        "type": "object",
        "properties": {
          "l2Address": {
            "type": "string",
            "description": "L2 token address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "l1Address": {
            "type": "string",
            "description": "L1 token address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8",
            "examples": [
              "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8",
              null]
          },
          "symbol": {
            "type": "string",
            "description": "Token symbol",
            "example": "ABCD"
          },
          "name": {
            "type": "string",
            "description": "Token name",
            "example": "ABCD ERC20 token",
            "examples": [
              "ABCD ERC20 token",
              null]
          },
          "decimals": {
            "type": "number",
            "description": "Token decimals value",
            "example": 18
          }
        },
        "required": [
          "l2Address",
          "symbol",
          "decimals"
        ]
      },
      "TokenAddressDto": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "string",
            "description": "Token balance",
            "example": "99145500"
          },
          "token": {
            "description": "Token record for the corresponding balance. Null if token is not ERC20-like",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenDto"
              }
            ]
          }
        },
        "required": [
          "balance",
          "token"
        ]
      },
      "AccountDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Blockchain address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "blockNumber": {
            "type": "number",
            "description": "The number of the latest block affected the address balances",
            "example": 12345
          },
          "balances": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TokenAddressDto"
            },
            "description": "Token address to token balance map",
            "example": {
              "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8": {
                "balance": "100000000",
                "token": {
                  "l2Address": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8",
                  "l1Address": null,
                  "symbol": "symbol",
                  "name": "Token name",
                  "decimals": 18
                }
              },
              "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d9": {
                "balance": "300000045",
                "token": {
                  "l2Address": "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d9",
                  "l1Address": "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d1",
                  "symbol": "symbol 2",
                  "name": "Token name 2",
                  "decimals": 18
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "For account address type always equals to 'account'",
            "example": "account"
          },
          "sealedNonce": {
            "type": "number",
            "description": "The nonce for the account in sealed blocks",
            "example": 12345
          },
          "verifiedNonce": {
            "type": "number",
            "description": "The nonce for the account in verified blocks",
            "example": 12345
          }
        },
        "required": [
          "address",
          "blockNumber",
          "balances",
          "type",
          "sealedNonce",
          "verifiedNonce"
        ]
      },
      "ContractDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "Blockchain address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "blockNumber": {
            "type": "number",
            "description": "The number of the latest block affected the address balances",
            "example": 12345
          },
          "balances": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/TokenAddressDto"
            },
            "description": "Token address to token balance map",
            "example": {
              "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8": {
                "balance": "100000000",
                "token": {
                  "l2Address": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8",
                  "l1Address": null,
                  "symbol": "symbol",
                  "name": "Token name",
                  "decimals": 18
                }
              },
              "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d9": {
                "balance": "300000045",
                "token": {
                  "l2Address": "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d9",
                  "l1Address": "0xD754fF5e8A6f257E162F72578A4Bb0493C0681d1",
                  "symbol": "symbol 2",
                  "name": "Token name 2",
                  "decimals": 18
                }
              }
            }
          },
          "type": {
            "type": "string",
            "description": "For account address type always equals to 'contract'",
            "example": "contract"
          },
          "bytecode": {
            "type": "string",
            "description": "Contract bytecode",
            "example": "0x0x000200000000000200080000000000020001000000010355"
          },
          "createdInBlockNumber": {
            "type": "number",
            "description": "The number of the block that created the contract",
            "example": 12345
          },
          "creatorTxHash": {
            "type": "string",
            "description": "The hash of the transaction that created the contract",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c"
          },
          "totalTransactions": {
            "type": "number",
            "description": "The total number of transactions for the contract",
            "example": 12345
          },
          "creatorAddress": {
            "type": "string",
            "description": "Creator address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          }
        },
        "required": [
          "address",
          "blockNumber",
          "balances",
          "type",
          "bytecode",
          "createdInBlockNumber",
          "creatorTxHash",
          "totalTransactions",
          "creatorAddress"
        ]
      },
      "ListPageMetaDto": {
        "type": "object",
        "properties": {
          "currentPage": {
            "type": "number",
            "minimum": 1,
            "description": "The current page one-based index",
            "example": 1
          },
          "itemCount": {
            "type": "number",
            "minimum": 0,
            "description": "The amount of items on the current page (the length of items array)",
            "example": 5
          },
          "itemsPerPage": {
            "type": "number",
            "minimum": 1,
            "description": "The requested items per page",
            "example": 10
          },
          "totalItems": {
            "type": "number",
            "minimum": 0,
            "description": "The total amount of items",
            "example": 15
          },
          "totalPages": {
            "type": "number",
            "minimum": 0,
            "description": "The total amount of pages",
            "example": 5
          }
        },
        "required": [
          "currentPage",
          "itemCount",
          "itemsPerPage",
          "totalItems",
          "totalPages"
        ]
      },
      "ListPageLinksDto": {
        "type": "object",
        "properties": {
          "first": {
            "type": "string",
            "description": "A URL for the first page to call",
            "example": "{{entityListEndpoint}}?limit=10"
          },
          "last": {
            "type": "string",
            "description": "A URL for the last page to call, '' if no items in the collection",
            "example": "{{entityListEndpoint}}?page=4&limit=10",
            "examples": [
              "{{entityListEndpoint}}?page=4&limit=10",
              ""
            ]
          },
          "next": {
            "type": "string",
            "description": "A URL for the next page to call, '' if no next page to call",
            "example": "{{entityListEndpoint}}?page=4&limit=10",
            "examples": [
              "{{entityListEndpoint}}?page=4&limit=10",
              ""
            ]
          },
          "previous": {
            "type": "string",
            "description": "A URL for the previous page to call, '' if no previous page to call",
            "example": "{{entityListEndpoint}}?page=2&limit=10",
            "examples": [
              "{{entityListEndpoint}}?page=2&limit=10",
              ""
            ]
          }
        },
        "required": [
          "first"
        ]
      },
      "ListPageDto": {
        "type": "object",
        "properties": {
          "items": {
            "description": "An array of items",
            "type": "array",
            "items": {
              "type": "array"
            }
          },
          "meta": {
            "description": "An object with a paging configuration",
            "allOf": [
              {
                "$ref": "#/components/schemas/ListPageMetaDto"
              }
            ]
          },
          "links": {
            "description": "An object with first, last, next, previous links defined if available.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ListPageLinksDto"
              }
            ]
          }
        },
        "required": [
          "items",
          "meta"
        ]
      },
      "LogDto": {
        "type": "object",
        "properties": {
          "address": {
            "type": "string",
            "description": "The address of the contract that generated this log",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "topics": {
            "description": "The list of topics (indexed properties) for this log",
            "example": [
              "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
              "0x0000000000000000000000000000000000000000000000000000000000000000",
              "0x000000000000000000000000b7e2355b87ff9ae9b146ca6dcee9c02157937b01"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "data": {
            "type": "string",
            "description": "The data included in this log",
            "example": "0x000000000000000000000000000000000000000000000000016345785d8a0000"
          },
          "blockNumber": {
            "type": "number",
            "description": "The block height (number) of the block including the transaction of this log",
            "example": 3233097
          },
          "transactionHash": {
            "type": "string",
            "description": "The transaction hash of the transaction of this log",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0",
            "examples": [
              "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0",
              null],
            "nullable": true
          },
          "transactionIndex": {
            "type": "number",
            "description": "The index of the transaction in the block of the transaction of this log",
            "example": 1
          },
          "logIndex": {
            "type": "number",
            "description": "The index of this log across all logs in the entire block",
            "example": 1
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the log was created",
            "example": "2022-11-21T18:16:51.000Z"
          }
        },
        "required": [
          "address",
          "topics",
          "data",
          "blockNumber",
          "transactionHash",
          "transactionIndex",
          "logIndex",
          "timestamp"
        ]
      },
      "TransferDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Transfer sender address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "to": {
            "type": "string",
            "description": "Transfer receiver address",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "blockNumber": {
            "type": "number",
            "description": "The block height (number) of the block that includes this transfer",
            "example": 3233097
          },
          "transactionHash": {
            "type": "string",
            "description": "The transaction hash of the transaction of this transfer. Null if it was a block transfer",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0",
            "examples": [
              "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0",
              null],
            "nullable": true
          },
          "amount": {
            "type": "string",
            "description": "The total amount that was transferred. Null if no amount was specified for the transfer like with NFT tokens",
            "example": "100000000",
            "examples": [
              "100000000",
              null],
            "nullable": true
          },
          "token": {
            "description": "Token record for the corresponding transfer. Null if token is not ERC20-like",
            "nullable": true,
            "allOf": [
              {
                "$ref": "#/components/schemas/TokenDto"
              }
            ]
          },
          "tokenAddress": {
            "type": "string",
            "description": "The address of the token that was transferred (same as token.l2Address). 0x000000000000000000000000000000000000800a for ETH",
            "example": "0xd754Ff5e8a6f257E162F72578A4bB0493c0681d8"
          },
          "type": {
            "type": "string",
            "enum": [
              "deposit",
              "transfer",
              "withdrawal",
              "fee",
              "mint",
              "refund"
            ],
            "description": "The type of the transfer",
            "example": "transfer",
            "examples": [
              "deposit",
              "transfer",
              "withdrawal",
              "fee",
              "mint",
              "refund"
            ]
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the transfer was created",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "fields": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "description": "Additional transfer fields that depend on the particular transfer. For instance: { tokenId: number } for NFT",
            "example": {
              "tokenId": 1
            },
            "examples": [
              {
                "tokenId": 1
              },
              null],
            "nullable": true
          }
        },
        "required": [
          "from",
          "to",
          "blockNumber",
          "transactionHash",
          "amount",
          "token",
          "tokenAddress",
          "type",
          "timestamp",
          "fields"
        ]
      },
      "BlockDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "The height (number) of this block",
            "example": 10
          },
          "l1BatchNumber": {
            "type": "number",
            "description": "The height (number) of block's batch",
            "example": 5
          },
          "isL1BatchSealed": {
            "type": "boolean",
            "description": "Property that shows whether the block's L1 batch is already sealed",
            "example": true,
            "examples": [true, false]
          },
          "hash": {
            "type": "string",
            "description": "The hash of this block",
            "example": "0x51f81bcdfc324a0dff2b5bec9d92e21cbebc4d5e29d3a3d30de3e03fbeab8d7f"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of this block",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "gasUsed": {
            "type": "string",
            "description": "The total amount of gas used by all transactions in this block",
            "example": "100000000"
          },
          "status": {
            "type": "string",
            "enum": [
              "sealed",
              "verified"
            ],
            "description": "Status of the block",
            "example": "sealed",
            "examples": [
              "sealed",
              "verified"
            ]
          },
          "l1TxCount": {
            "type": "number",
            "description": "L1 transactions count",
            "example": 10
          },
          "l2TxCount": {
            "type": "number",
            "description": "L2 transactions count",
            "example": 10
          },
          "size": {
            "type": "number",
            "description": "Block size (number of transaction in the block)",
            "example": 20
          }
        },
        "required": [
          "number",
          "l1BatchNumber",
          "isL1BatchSealed",
          "hash",
          "timestamp",
          "gasUsed",
          "status",
          "l1TxCount",
          "l2TxCount",
          "size"
        ]
      },
      "BlockDetailDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "The height (number) of this block",
            "example": 10
          },
          "l1BatchNumber": {
            "type": "number",
            "description": "The height (number) of block's batch",
            "example": 5
          },
          "isL1BatchSealed": {
            "type": "boolean",
            "description": "Property that shows whether the block's L1 batch is already sealed",
            "example": true,
            "examples": [true, false]
          },
          "hash": {
            "type": "string",
            "description": "The hash of this block",
            "example": "0x51f81bcdfc324a0dff2b5bec9d92e21cbebc4d5e29d3a3d30de3e03fbeab8d7f"
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of this block",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "gasUsed": {
            "type": "string",
            "description": "The total amount of gas used by all transactions in this block",
            "example": "100000000"
          },
          "status": {
            "type": "string",
            "enum": [
              "sealed",
              "verified"
            ],
            "description": "Status of the block",
            "example": "sealed",
            "examples": [
              "sealed",
              "verified"
            ]
          },
          "l1TxCount": {
            "type": "number",
            "description": "L1 transactions count",
            "example": 10
          },
          "l2TxCount": {
            "type": "number",
            "description": "L2 transactions count",
            "example": 10
          },
          "size": {
            "type": "number",
            "description": "Block size (number of transaction in the block)",
            "example": 20
          },
          "parentHash": {
            "type": "string",
            "description": "The hash of the previous block",
            "example": "0x51f81bcdfc324a0dff2b5bec9d92e21cbebc4d5e29d3a3d30de3e03fbeab8d7f",
            "examples": [
              "0x51f81bcdfc324a0dff2b5bec9d92e21cbebc4d5e29d3a3d30de3e03fbeab8d7f",
              null]
          },
          "gasLimit": {
            "type": "string",
            "description": "The maximum amount of gas that this block was permitted to use",
            "example": "100000000"
          },
          "baseFeePerGas": {
            "type": "string",
            "description": "Base fee per gas",
            "example": "100000000"
          },
          "extraData": {
            "type": "string",
            "description": "Extra data a miner may choose to include when mining a block",
            "example": "0x00"
          },
          "commitTxHash": {
            "type": "string",
            "description": "Commit transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "executeTxHash": {
            "type": "string",
            "description": "Execute transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "proveTxHash": {
            "type": "string",
            "description": "Prove transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "committedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the block was committed",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "executedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the block was executed",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "provenAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the block was approved",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          }
        },
        "required": [
          "number",
          "l1BatchNumber",
          "isL1BatchSealed",
          "hash",
          "timestamp",
          "gasUsed",
          "status",
          "l1TxCount",
          "l2TxCount",
          "size",
          "gasLimit",
          "baseFeePerGas",
          "extraData",
          "commitTxHash",
          "executeTxHash",
          "proveTxHash",
          "committedAt",
          "executedAt",
          "provenAt"
        ]
      },
      "TransactionDto": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "The hash of this transaction",
            "example": "0x5e018d2a81dbd1ef80ff45171dd241cb10670dcb091e324401ff8f52293841b0"
          },
          "to": {
            "type": "string",
            "description": "The address this transaction is to",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "from": {
            "type": "string",
            "description": "The address this transaction is from",
            "example": "0xc7e0220d02d549c4846A6EC31D89C3B670Ebe35C"
          },
          "transactionIndex": {
            "type": "number",
            "description": "The index of the transaction in the block",
            "example": 3233097
          },
          "data": {
            "type": "string",
            "description": "The data included in this transaction",
            "example": "0x000000000000000000000000000000000000000000000000016345785d8a0000"
          },
          "value": {
            "type": "string",
            "description": "The amount this transaction sent",
            "example": "0x2386f26fc10000"
          },
          "fee": {
            "type": "string",
            "description": "The fee paid to execute the transaction",
            "example": "0x2386f26fc10000"
          },
          "nonce": {
            "type": "number",
            "description": "The nonce for this transaction",
            "example": 42
          },
          "blockNumber": {
            "type": "number",
            "description": "The number (height) of the block this transaction was mined in",
            "example": 3233097
          },
          "blockHash": {
            "type": "string",
            "description": "The hash of the block this transaction was mined in",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c"
          },
          "receivedAt": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp when the transaction was received",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "commitTxHash": {
            "type": "string",
            "description": "The hash of the transaction that committed the block, null if not committed yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "proveTxHash": {
            "type": "string",
            "description": "The hash of the transaction that proved the block, null if not proved yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "executeTxHash": {
            "type": "string",
            "description": "The hash of the transaction that executed the block, null if not executed yet",
            "example": "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
            "examples": [
              "0xdfd071dcb9c802f7d11551f4769ca67842041ffb81090c49af7f089c5823f39c",
              null],
            "nullable": true
          },
          "isL1Originated": {
            "type": "boolean",
            "description": "Property that shows whether the transaction was originated from L1 network",
            "example": true,
            "examples": [true, false]
          },
          "l1BatchNumber": {
            "type": "number",
            "description": "L1 batch number",
            "example": 3233097,
            "examples": [3233097, null],
            "nullable": true
          },
          "isL1BatchSealed": {
            "type": "boolean",
            "description": "Property that shows whether the transaction's L1 batch is already sealed",
            "example": true,
            "examples": [true, false]
          },
          "status": {
            "type": "string",
            "enum": [
              "included",
              "committed",
              "proved",
              "verified",
              "failed"
            ],
            "description": "The status of the transaction",
            "example": "verified",
            "examples": [
              "included",
              "committed",
              "proved",
              "verified",
              "failed"
            ]
          }
        },
        "required": [
          "hash",
          "to",
          "from",
          "transactionIndex",
          "data",
          "value",
          "fee",
          "nonce",
          "blockNumber",
          "blockHash",
          "receivedAt",
          "commitTxHash",
          "proveTxHash",
          "executeTxHash",
          "isL1Originated",
          "l1BatchNumber",
          "isL1BatchSealed",
          "status"
        ]
      },
      "BatchDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "The height (number) of the batch",
            "example": 10
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of the batch",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "rootHash": {
            "type": "string",
            "description": "Root hash of the batch",
            "example": "0x1915069f839c80d8bf1df2ba08dc41fbca1fcae62ecf3a148dda013d520a3638",
            "examples": [
              "0x1915069f839c80d8bf1df2ba08dc41fbca1fcae62ecf3a148dda013d520a3638",
              null]
          },
          "executedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch was executed",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "status": {
            "type": "string",
            "enum": [
              "sealed",
              "verified"
            ],
            "description": "Status of the batch",
            "example": "sealed",
            "examples": [
              "sealed",
              "verified"
            ]
          },
          "l1TxCount": {
            "type": "number",
            "description": "L1 transactions count",
            "example": 10
          },
          "l2TxCount": {
            "type": "number",
            "description": "L2 transactions count",
            "example": 10
          },
          "size": {
            "type": "number",
            "description": "Batch size (number of transaction in the batch)",
            "example": 20
          }
        },
        "required": [
          "number",
          "timestamp",
          "executedAt",
          "status",
          "l1TxCount",
          "l2TxCount",
          "size"
        ]
      },
      "BatchDetailsDto": {
        "type": "object",
        "properties": {
          "number": {
            "type": "number",
            "description": "The height (number) of the batch",
            "example": 10
          },
          "timestamp": {
            "format": "date-time",
            "type": "string",
            "description": "The timestamp of the batch",
            "example": "2022-11-21T18:16:51.000Z"
          },
          "rootHash": {
            "type": "string",
            "description": "Root hash of the batch",
            "example": "0x1915069f839c80d8bf1df2ba08dc41fbca1fcae62ecf3a148dda013d520a3638",
            "examples": [
              "0x1915069f839c80d8bf1df2ba08dc41fbca1fcae62ecf3a148dda013d520a3638",
              null]
          },
          "executedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch was executed",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "status": {
            "type": "string",
            "enum": [
              "sealed",
              "verified"
            ],
            "description": "Status of the batch",
            "example": "sealed",
            "examples": [
              "sealed",
              "verified"
            ]
          },
          "l1TxCount": {
            "type": "number",
            "description": "L1 transactions count",
            "example": 10
          },
          "l2TxCount": {
            "type": "number",
            "description": "L2 transactions count",
            "example": 10
          },
          "size": {
            "type": "number",
            "description": "Batch size (number of transaction in the batch)",
            "example": 20
          },
          "commitTxHash": {
            "type": "string",
            "description": "Commit transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "proveTxHash": {
            "type": "string",
            "description": "Prove transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "executeTxHash": {
            "type": "string",
            "description": "Execute transaction hash",
            "example": "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
            "examples": [
              "0x85f97229ef1e489d4a5c2f8c15eb275ee7a6adcdae57d02597221d202b0f421b",
              null]
          },
          "committedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch was committed",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "provenAt": {
            "format": "date-time",
            "type": "string",
            "description": "Date when the batch was proven",
            "example": "2022-09-15T15:13:57.035Z",
            "examples": [
              "2022-09-15T15:13:57.035Z",
              null]
          },
          "l1GasPrice": {
            "type": "string",
            "description": "L1 gas price",
            "example": "100000000"
          },
          "l2FairGasPrice": {
            "type": "string",
            "description": "L2 fair gas price",
            "example": "100000000"
          }
        },
        "required": [
          "number",
          "timestamp",
          "executedAt",
          "status",
          "l1TxCount",
          "l2TxCount",
          "size",
          "commitTxHash",
          "proveTxHash",
          "executeTxHash",
          "committedAt",
          "provenAt",
          "l1GasPrice",
          "l2FairGasPrice"
        ]
      },
      "StatsDto": {
        "type": "object",
        "properties": {
          "lastSealedBatch": {
            "type": "number",
            "description": "The number of the last sealed batch",
            "example": 20
          },
          "lastVerifiedBatch": {
            "type": "number",
            "description": "The number of the last verified batch",
            "example": 10
          },
          "lastSealedBlock": {
            "type": "number",
            "description": "The number of the last sealed block",
            "example": 20
          },
          "lastVerifiedBlock": {
            "type": "number",
            "description": "The number of the last verified block",
            "example": 10
          },
          "totalTransactions": {
            "type": "number",
            "description": "The total number of processed transactions",
            "example": 30
          }
        },
        "required": [
          "lastSealedBatch",
          "lastVerifiedBatch",
          "lastSealedBlock",
          "lastVerifiedBlock",
          "totalTransactions"
        ]
      }
    }
  }
}